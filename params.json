{"name":"JsonLogic","tagline":"Build complex rules and serialize them to JSON","body":"# json-logic-js\r\n\r\nThe goal of this format is to share complex logical expressions between front-end and back-end code.\r\n\r\nThe same format can be executed:\r\n  - in JavaScript by the library [json-logic-js](https://github.com/jwadhams/json-logic-js/)\r\n  - in PHP by the library [json-logic-php](https://github.com/jwadhams/json-logic-php/)\r\n\r\n\r\n## Virtues\r\n\r\n  1. **Terse.**\r\n  1. **Consistent.** `{\"operator\" : [\"values\" ... ]}`  Always.\r\n  1. **Secure.** We never `eval()`. Rules only have access to data you provide.\r\n  1. **Flexible.** Most operands are 1 line of code.\r\n\r\n\r\n## Examples\r\n\r\n### Simple\r\n```js\r\njsonLogic( { \"==\" : [1, 1] } );\r\n// true\r\n```\r\n\r\nThis is a simple test, equivalent to `1 == 1`.  A few things about the format:\r\n\r\n  1. The operator is always in the \"key\" position. There is only one key per JsonLogic rule.\r\n  1. The values are typically an array.\r\n  1. Each value can be a string, number, boolean, array (non-associative), or null\r\n\r\n### Compound\r\nHere we're beginning to nest rules. \r\n\r\n```js\r\njsonLogic(\r\n\t{\"and\" : [\r\n\t  { \">\" : [3,1] },\r\n\t  { \"<\" : [1,3] }\r\n\t] }\r\n);\r\n// true\r\n```\r\n  \r\nIn an infix language (like JavaScript) this could be written as:\r\n\r\n```js\r\n( (3 > 1) && (1 < 3) )\r\n```\r\n    \r\n### Data-Driven\r\n\r\nObviously these rules aren't very interesting if they can only take static literal data. Typically `jsonLogic` will be called with a rule object and a data object. You can use the `var` operator to get attributes of the data object:\r\n\r\n```js\r\njsonLogic(\r\n\t{ \"var\" : [\"a\"] }, // Rule\r\n\t{ a : 1, b : 2 }   // Data\r\n);\r\n// 1\r\n```\r\n\r\nIf you like, we support [syntactic sugar](https://en.wikipedia.org/wiki/Syntactic_sugar) on unary operators to skip the array around values:\r\n\r\n```js\r\njsonLogic(\r\n\t{ \"var\" : \"a\" },\r\n\t{ a : 1, b : 2 }\r\n);\r\n// 1\r\n```\r\n\r\nYou can also use the `var` operator to access an array by numeric index:\r\n\r\n```js\r\njsonLogic(\r\n\t{\"var\" : 1 },\r\n\t[ \"apple\", \"banana\", \"carrot\" ]\r\n);\r\n// \"banana\"\r\n```\r\n\r\nHere's a complex rule that mixes literals and data. The pie isn't ready to eat unless it's cooler than 110 degrees, *and* filled with apples.\r\n\r\n```js\r\nvar rules = { \"and\" : [\r\n  {\"<\" : [ { \"var\" : \"temp\" }, 110 ]},\r\n  {\"==\" : [ { \"var\" : \"pie.filling\" }, \"apple\" ] }\r\n] };\r\n\r\nvar data = { \"temp\" : 100, \"pie\" : { \"filling\" : \"apple\" } };\r\n\r\njsonLogic(rules, data);\r\n// true\r\n```\r\n\r\n### Always and Never\r\nSometimes the rule you want to process is \"Always\" or \"Never.\"  If the first parameter passed to `jsonLogic` is a non-object, non-associative-array, it is returned immediately.\r\n\r\n```js\r\n//Always\r\njsonLogic(true, data_will_be_ignored);\r\n// true\r\n\r\n//Never\r\njsonLogic(false, i_wasnt_even_supposed_to_be_here);\r\n// false\r\n```\r\n    \r\n## Supported Operations\r\n\r\n  - `==` \r\n  - `===` \r\n  - `!=`\r\n  - `!==`\r\n  - `>`\r\n  - `>=`\r\n  - `<`\r\n  - `<=`\r\n  - `!` - Unary negation\r\n  - `and`\r\n  - `or`\r\n  - `?:` - [ternary](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator), like `a ? b : c;`\r\n  - `in` - Value in array (e.g., `{\"in\":[ \"Ringo\", [\"John\", \"Paul\", \"George\", \"Ringo\"] ]}`) \r\n    - *or* substring in string (e.g., `{\"in\":[\"Spring\", \"Springfield\"]}`)\r\n  - `var` - Retrieve data from the provided data object\r\n  - `log` - Logs the first value to console, then passes it through unmodified.\r\n  \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}